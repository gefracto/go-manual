#+BEGIN_CENTER 
*Если ты не видишь эту надпись, значит, твой deploy не удался*
#+END_CENTER
[[file:петросян.jpg]]


Привет, %username%. 
Сегодня мы -- следуя этому мануалу -- задеплоим на хероку контейнер с этим мануалом. Такая вот рекурсия.

Отдохни, сделай кофе. 

Приготовься. 

Глубокий вдох. 

Готов?

* Инструменты
** Linux
+ Эмулятор терминала
** Windows
+ Git bash

#+BEGIN_CENTER
ПОЕХАЛИ!
#+END_CENTER


* Создаем новый проект

** На гитхабе
*** На github.com создаем новый репозиторий. Обзываем его именем вашего проекта.
[[file:newrepo.png]]
[[file:namerepo.png]]

*** Жмем Create

[[file:createrepo.png]]

*** Попадаем на страницу QuickSetup, можно её пока оставить - там инструкции для инициализации локального проекта.
[[file:inithelp.png]]

** Локально
*** Создаем директорию $GOPATH/src/github.com/yourgitname/yourproject и переходим в неё.
В моем случае это:
#+BEGIN_SRC sh
mkdir ~/go/src/github.com/gefracto/go-manual
cd ~/go/src/github.com/gefracto/go-manual
#+END_SRC

*** Со страницы QuickSetup git'a копируем команды, но не забываем добавить "git add .":
#+BEGIN_SRC sh
git init
git add .
git commit -m "first commit"
git remote add origin git@github.com:gefracto/go-manual.git
git push -u origin master
#+END_SRC

[[file:gitinit.png]] 

[[file:addcommit.png]] 

[[file:gitpusherror.png]] 


*** Ошибка команды git push
Возможно, ты увидишь такое же сообщение. 

#+BEGIN_SRC sh
fatal: cannot run ssh: Нет такого файла или каталога
fatal: unable to fork
#+END_SRC

Оно говорит о том, что нам нужно сгенерить ssh-key. 

Даже если тебе удалось запушить, все равно выполни этот шаг - ssh-key нам ещё пригодится.

*** Генерируем ssh
Выполняем в терминале:
#+BEGIN_SRC sh
ssh-keygen -t rsa -b 4096 -C "gefracto@circleci.com"
#+END_SRC

[[file:ssh-keygen.png]]

Заметь, что команда заканчивается комментарием "-C "gefracto@circleci.com"". До символа @ - это твой git-логин. В дальнейшем этот комментарий понадобится нам для деплоинга на хероку.

*** Привязываем ssh к github

**** Выполняем в консоли:
#+BEGIN_SRC sh
cat ~/.ssh/id_rsa.pub
#+END_SRC

[[file:id_rsapub.png]] 

Делаем ctrl+C этого мусора и идем на github.com.

**** Переходим в настройки нашего репозитория, находим пункт Deploy keys

[[file:gitsettings.png]]

[[file:deploykeys.png]]

**** Тыцаем "Add deploy key"
**** В поле title вводим имя любимого кота или название проекта. Без разницы.
**** В поле key вставляем скопированный ssh-мусор
**** Не забываем отметить галочкой "Allow write access"

[[file:adddeploykey.png]]

[[file:resaddgitkey.png]]

*** Повторяем git push, если В ПЕРВЫЙ РАЗ НЕ ПОЛУЧИЛОСЬ

[[file:continue.jpg]]

#+BEGIN_SRC sh
git push -u origin master
#+END_SRC

[[file:gitpushsuccess.png]]

#+BEGIN_CENTER
УСПЕХ!
Репозиторий создан. Можем теперь написать что-то на Go, а именно: простую программу, которая отдает static этого мануала.
#+END_CENTER

* Наполняем проект
** Static этого мануала
Ты можешь написать свой static, но я рекомендую использовать заготовленный мною.

**** Скачай этот [[https://drive.google.com/open?id=0BxQORje5K7bCd3Z0Y1RmelVzZGc][zip-файл]] , предварительно отключив антивирус (шутка), и распакуй в корень своего пустого проекта.

**** Создай в корне проекта файл main.go и скопипасть в него следующий текст:

#+BEGIN_SRC go
package main

import (
	"net/http"
	"os"
)

func main() {
	fileserver := http.FileServer(http.Dir("static"))
	http.Handle("/", fileserver)
	http.ListenAndServe(":"+os.Getenv("PORT"), nil)
}
#+END_SRC

После этих манипуляций корневая директория проекта выглядит так:
[[file:rootdir0.png]]

Делаем пуш:

#+BEGIN_SRC sh
git commit -am "my project"
git push -u origin master
#+END_SRC

#+BEGIN_CENTER
Теперь приступаем к самому захватывающему -- настройке CircleCi и Heroku
#+END_CENTER

* HEROKU.com
**** Логинимся на heroku.
**** Логинимся с помощью git-аккаунта
**** Идем в раздел projects
**** Идем в список своих проектов [[https://dashboard.heroku.com/apps]]
**** Добавляем новое приложение (Create new app)
[[file:addnewapp.png]]

**** Пишем имя своего проекта, либо любое другое, и жмакаем "Create App"
[[file:nameyourapp.png]]

**** Идем в настройки аккаунта (Account Settings)
[[file:accsettings.png]]

**** Добавляем новый ssh-key, который нужен для взаимодействия с CircleCI.
[[file:sshkeys.png]]

[[file:newsshkey.png]]

Напомню, что мы берем ssh, который создали ранее для привязки к git аккаунту.
Получить его можно командой:
#+BEGIN_SRC sh
cat ~/.ssh/id_rsa.pub
#+END_SRC

**** Save Changes
[[file:sshadded.png]]


#+BEGIN_CENTER 
Забудем про HEROKU. 

Он нам больше не нужен. 

Почти.
#+END_CENTER

* CIRCLECI.com
**** Логинимся с помощью git-аккаунта
**** В меню выбираем Projects, кликаем свой git-аккаунт
[[file:projects.png]]

**** Жмем кнопку Add project
**** Снова выбираем свой git, находим свой проект и тыкаем Setup project
[[file:findproject.png]]

**** Выставляем параметры:
+ OS: Linux
+ Platform: 2.0
+ Language: Go

**** Начинаем билдить проект!
[[file:startbuilding.png]]

#+BEGIN_CENTER 
ОПАЧКИ! НЕУДАЧА :(
#+END_CENTER

[[file:notests.png]]

[[file:youshallnotpasstests.jpg]]

CircleCi не нашел в твоем проекте тестов. Ниче! Дадим ему то, чего он хочет!
**** Создай в корне проекта файл *main _test.go* с таким содержимым:

#+BEGIN_SRC go
package main
#+END_SRC

Да, это всё. Нам просто нечего тестировать.

**** Обновим репозиторий
#+BEGIN_SRC sh 
git add .
git commit -m "main_test added"
git push -u origin master
#+END_SRC

CircleCi узнал, что на git'e обновился репозиторий, и тут же начал новый билд.
На этот раз - удачный.
[[file:sucs.png]]

#+BEGIN_CENTER 
Теперь мы должны подружить circleci с heroku.
Выполним необходимые настройки.
#+END_CENTER

**** На главной circleci перейдем в настройки проекта, кликнув по шестеренке
[[file:dosettings.png]]

**** Добавим переменные окружения (Environment Variables)
[[file:envvar.png]]

Нужно добавить две переменные:
***** LOGIN
Value - это все тот же ssh-rsa, который мы берем командой
#+BEGIN_SRC sh 
cat ~/.ssh/id_rsa.pub
#+END_SRC

[[file:herokulogin.png]]

***** API KEY

Идем по [[https://dashboard.heroku.com/account][ccылке]], ищем API KEY, нажимаем REVEAL и копируем ключ

[[file:apikey.png]]

[[file:herokuapikey.png]]

[[file:loginapikey.png]]

Идем по другой [[https://circleci.com/account/heroku][ссылке]], ещё раз сохраним API KEY
[[file:apikey3.png]]

Идем в раздел Heroku Deployment

[[file:herokudeployment.png]]

**** Нажмем кнопочку Set User
[[file:setuser.png]]

#+BEGIN_CENTER
Готово.

Теперь пишем конфиги.

#+END_CENTER
[[file:headshot.jpg]]

* CONFIGS
** Procfile
Перво-наперво создадим в корне проекта файл с именем Procfile и напишем туда
#+BEGIN_SRC  
web: go-manual
#+END_SRC

В твоем случае вместе "go-manual" должно быть имя директории, в которой лежит проект.

** Dockerfile
#+BEGIN_CENTER
Конечно же, в качестве контейнера мы будем использовать SCRATCH. 

Он очень легкий и все такое. 

Хотя, погоди...
#+END_CENTER

[[file:buti.jpg]]

Да, у меня не получилось оживить scratch. Мы будем использовать golang образ.

Создаем в корне проекта Dockerfile, пишем туда следующее:

#+BEGIN_SRC 
FROM golang:onbuild
COPY main /
CMD ["/main"]
#+END_SRC

** config.yml

Создаем в корне проекта каталог с именем ".circleci", в нем создаем файл "config.yml", куда пишем:
#+BEGIN_SRC yaml
# Golang CircleCI 2.0 configuration file

version: 2



jobs:
  
  build:
    
    docker:
      # specify the version
      - image: circleci/golang:1.8
      
    working_directory: /go/src/github.com/gefracto/go-manual
    steps:
      - checkout
      - setup_remote_docker

      # specify any bash command here prefixed with `run: `
      - run: mkdir TEST_RESULTS
      - run: go get github.com/jstemmer/go-junit-report
      - run: go get -v -t -d ./...
      - run: go test -v ./...
      - run: wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh
      - run: heroku login
      - run: git remote add heroku git@heroku.com:go-manual.git
      - run: CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o main
      - run: docker build -t scratch -f Dockerfile .
      - run: heroku plugins:install heroku-container-registry
      - run: heroku container:login
      - run: heroku container:push web
#+END_SRC

В этом конфиге тебе нужно отредактировать две строчки:
#+BEGIN_SRC 
 working_directory: /go/src/github.com/gefracto/go-manual
- run: git remote add heroku git@heroku.com:go-manual.git
#+END_SRC

Поменяй "go-manual" на свои значения.

* LAST STEPS
Завершающий пуш:
#+BEGIN_SRC sh  
git add .
git commit -m "I DID IT!"
git push -u origin master
#+END_SRC

Иди на circleci.com и смотри, как билдится твой проект.

Это продлится несколько минут.

Можно попить победного кофейку.

А по возвращению сходи по ссылке на свой [[go-manual.herokuapp.com][проект]]. Найти ты его можешь [[https://dashboard.heroku.com/apps][тут]].

#+BEGIN_CENTER 
-----------------------
[[https://github.com/gefracto/go-manual][Исходники этого мануала на github'e]]
#+BEGIN_SRC 
go get github.com/gefracto/go-manual
#+END_SRC
#+END_CENTER

